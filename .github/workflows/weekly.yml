name: Weekly Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 5' # Runs weekly every Friday 18:00 Tokyo time ðŸ••

jobs:
  decision_task:
    name: Determine whether to perform Nightly build
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.decision.outputs.status }}
    steps:
      - name: Take a decision
        id: decision
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -xe
          LATEST_RELEASE=$(gh api repos/${{ github.repository }}/releases/latest --jq '.body' | cut -d@ -f2)
          FFMPEG_LATEST=$(git ls-remote https://github.com/FFmpeg/FFmpeg.git HEAD | cut -c1-9)
          if [[ "$LATEST_RELEASE" == "$FFMPEG_LATEST" ]]; then
            echo "status=skip" >> $GITHUB_OUTPUT
          else
            echo "status=proceed" >> $GITHUB_OUTPUT
          fi

  build_ffmpeg:
    needs: decision_task
    if: needs.decision_task.outputs.status == 'proceed'
    name: Build ffmpeg
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
        variant: [nonfree]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}

      - name: Artifact name
        id: dicitur
        run: |
          REF="${{ matrix.target }}-${{ matrix.variant }}"
          echo "arte_factum=${REF// /-}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.dicitur.outputs.arte_factum }}
          path: artifacts/
          retention-days: 7

  publish_release:
    name: Publish release
    needs: build_ffmpeg
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -xe

          BUILDID=$(date +'%Y-%m-%d-%H-%M')
          STUB=$(find artifacts -iname '*.zst' | head -1 | xargs -I{} basename {})
          REV=$(echo $STUB | cut -d'-' -f5)
          NTAG=$(echo $STUB | cut -d'-' -f3)

          TITLE="Build $BUILDID @ $REV"
          RELNOTE="Built from FFmpeg/FFmpeg@$REV"
          TAGNAME="build-$BUILDID-n$NTAG"

          gh release create "$TAGNAME" \
            --title "$TITLE" \
            --notes "$RELNOTE" \
            artifacts/*/*.zst
